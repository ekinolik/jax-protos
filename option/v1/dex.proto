syntax = "proto3";

package jax.v1;

option go_package = "github.com/ekinolik/jax/api/proto/option/v1;optionv1";

// OptionService provides endpoints for delta and gamma exposure calculations
service OptionService {
  // GetDex returns the delta exposure calculations for given parameters
  rpc GetDex(GetDexRequest) returns (GetDexResponse) {}
  
  // GetDexByStrikes returns the delta exposure calculations for a specified number of strikes around the spot price
  rpc GetDexByStrikes(GetDexByStrikesRequest) returns (GetDexResponse) {}

  // GetGex returns the gamma exposure calculations for given parameters
  rpc GetGex(GetDexRequest) returns (GetDexResponse) {}
  
  // GetGexByStrikes returns the gamma exposure calculations for a specified number of strikes around the spot price
  rpc GetGexByStrikes(GetDexByStrikesRequest) returns (GetDexResponse) {}
}

// GetDexRequest represents the request parameters
message GetDexRequest {
  string underlying_asset = 1;  // Required
  optional double start_strike_price = 2;  // Optional
  optional double end_strike_price = 3;    // Optional
}

// GetDexByStrikesRequest represents the request parameters for getting a specific number of strikes
message GetDexByStrikesRequest {
  string underlying_asset = 1;  // Required
  int32 num_strikes = 2;       // Required - number of strikes to return (must be odd)
}

// GetDexResponse represents the response structure
message GetDexResponse {
  double spot_price = 1;
  map<string, ExpirationDateMap> strike_prices = 2;
}

// ExpirationDateMap represents the nested structure for expiration dates
message ExpirationDateMap {
  map<string, OptionTypeMap> expiration_dates = 1;
}

// OptionTypeMap represents the nested structure for option types
message OptionTypeMap {
  map<string, DexValue> option_types = 1;
}

// DexValue represents the final DEX value
message DexValue {
  double value = 1;
} 
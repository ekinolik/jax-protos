// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.2
// source: api/proto/option/v1/dex.proto

package optionv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetDexRequest represents the request parameters
type GetDexRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UnderlyingAsset  string                 `protobuf:"bytes,1,opt,name=underlying_asset,json=underlyingAsset,proto3" json:"underlying_asset,omitempty"`              // Required
	StartStrikePrice *float64               `protobuf:"fixed64,2,opt,name=start_strike_price,json=startStrikePrice,proto3,oneof" json:"start_strike_price,omitempty"` // Optional
	EndStrikePrice   *float64               `protobuf:"fixed64,3,opt,name=end_strike_price,json=endStrikePrice,proto3,oneof" json:"end_strike_price,omitempty"`       // Optional
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetDexRequest) Reset() {
	*x = GetDexRequest{}
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDexRequest) ProtoMessage() {}

func (x *GetDexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDexRequest.ProtoReflect.Descriptor instead.
func (*GetDexRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_option_v1_dex_proto_rawDescGZIP(), []int{0}
}

func (x *GetDexRequest) GetUnderlyingAsset() string {
	if x != nil {
		return x.UnderlyingAsset
	}
	return ""
}

func (x *GetDexRequest) GetStartStrikePrice() float64 {
	if x != nil && x.StartStrikePrice != nil {
		return *x.StartStrikePrice
	}
	return 0
}

func (x *GetDexRequest) GetEndStrikePrice() float64 {
	if x != nil && x.EndStrikePrice != nil {
		return *x.EndStrikePrice
	}
	return 0
}

// GetDexByStrikesRequest represents the request parameters for getting a specific number of strikes
type GetDexByStrikesRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UnderlyingAsset string                 `protobuf:"bytes,1,opt,name=underlying_asset,json=underlyingAsset,proto3" json:"underlying_asset,omitempty"` // Required
	NumStrikes      int32                  `protobuf:"varint,2,opt,name=num_strikes,json=numStrikes,proto3" json:"num_strikes,omitempty"`               // Required - number of strikes to return (must be odd)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetDexByStrikesRequest) Reset() {
	*x = GetDexByStrikesRequest{}
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDexByStrikesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDexByStrikesRequest) ProtoMessage() {}

func (x *GetDexByStrikesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDexByStrikesRequest.ProtoReflect.Descriptor instead.
func (*GetDexByStrikesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_option_v1_dex_proto_rawDescGZIP(), []int{1}
}

func (x *GetDexByStrikesRequest) GetUnderlyingAsset() string {
	if x != nil {
		return x.UnderlyingAsset
	}
	return ""
}

func (x *GetDexByStrikesRequest) GetNumStrikes() int32 {
	if x != nil {
		return x.NumStrikes
	}
	return 0
}

// GetDexResponse represents the response structure
type GetDexResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	SpotPrice     float64                       `protobuf:"fixed64,1,opt,name=spot_price,json=spotPrice,proto3" json:"spot_price,omitempty"`
	StrikePrices  map[string]*ExpirationDateMap `protobuf:"bytes,2,rep,name=strike_prices,json=strikePrices,proto3" json:"strike_prices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDexResponse) Reset() {
	*x = GetDexResponse{}
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDexResponse) ProtoMessage() {}

func (x *GetDexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDexResponse.ProtoReflect.Descriptor instead.
func (*GetDexResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_option_v1_dex_proto_rawDescGZIP(), []int{2}
}

func (x *GetDexResponse) GetSpotPrice() float64 {
	if x != nil {
		return x.SpotPrice
	}
	return 0
}

func (x *GetDexResponse) GetStrikePrices() map[string]*ExpirationDateMap {
	if x != nil {
		return x.StrikePrices
	}
	return nil
}

// ExpirationDateMap represents the nested structure for expiration dates
type ExpirationDateMap struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	ExpirationDates map[string]*OptionTypeMap `protobuf:"bytes,1,rep,name=expiration_dates,json=expirationDates,proto3" json:"expiration_dates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExpirationDateMap) Reset() {
	*x = ExpirationDateMap{}
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpirationDateMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpirationDateMap) ProtoMessage() {}

func (x *ExpirationDateMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpirationDateMap.ProtoReflect.Descriptor instead.
func (*ExpirationDateMap) Descriptor() ([]byte, []int) {
	return file_api_proto_option_v1_dex_proto_rawDescGZIP(), []int{3}
}

func (x *ExpirationDateMap) GetExpirationDates() map[string]*OptionTypeMap {
	if x != nil {
		return x.ExpirationDates
	}
	return nil
}

// OptionTypeMap represents the nested structure for option types
type OptionTypeMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OptionTypes   map[string]*DexValue   `protobuf:"bytes,1,rep,name=option_types,json=optionTypes,proto3" json:"option_types,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionTypeMap) Reset() {
	*x = OptionTypeMap{}
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionTypeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionTypeMap) ProtoMessage() {}

func (x *OptionTypeMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionTypeMap.ProtoReflect.Descriptor instead.
func (*OptionTypeMap) Descriptor() ([]byte, []int) {
	return file_api_proto_option_v1_dex_proto_rawDescGZIP(), []int{4}
}

func (x *OptionTypeMap) GetOptionTypes() map[string]*DexValue {
	if x != nil {
		return x.OptionTypes
	}
	return nil
}

// DexValue represents the final DEX value
type DexValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         float64                `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexValue) Reset() {
	*x = DexValue{}
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexValue) ProtoMessage() {}

func (x *DexValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_option_v1_dex_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexValue.ProtoReflect.Descriptor instead.
func (*DexValue) Descriptor() ([]byte, []int) {
	return file_api_proto_option_v1_dex_proto_rawDescGZIP(), []int{5}
}

func (x *DexValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_api_proto_option_v1_dex_proto protoreflect.FileDescriptor

var file_api_proto_option_v1_dex_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x64, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x42, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x59, 0x0a, 0x10, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x61, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x50,
	0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x20, 0x0a, 0x08, 0x44, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x9f, 0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x12, 0x15,
	0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x42, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x73, 0x12, 0x1e, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x78, 0x42, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x78, 0x12, 0x15, 0x2e, 0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6a, 0x61, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x65,
	0x78, 0x42, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x6a, 0x61, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x42, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6a, 0x61, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x6b, 0x69, 0x6e, 0x6f, 0x6c, 0x69, 0x6b, 0x2f, 0x6a, 0x61, 0x78, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_option_v1_dex_proto_rawDescOnce sync.Once
	file_api_proto_option_v1_dex_proto_rawDescData = file_api_proto_option_v1_dex_proto_rawDesc
)

func file_api_proto_option_v1_dex_proto_rawDescGZIP() []byte {
	file_api_proto_option_v1_dex_proto_rawDescOnce.Do(func() {
		file_api_proto_option_v1_dex_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_option_v1_dex_proto_rawDescData)
	})
	return file_api_proto_option_v1_dex_proto_rawDescData
}

var file_api_proto_option_v1_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_proto_option_v1_dex_proto_goTypes = []any{
	(*GetDexRequest)(nil),          // 0: jax.v1.GetDexRequest
	(*GetDexByStrikesRequest)(nil), // 1: jax.v1.GetDexByStrikesRequest
	(*GetDexResponse)(nil),         // 2: jax.v1.GetDexResponse
	(*ExpirationDateMap)(nil),      // 3: jax.v1.ExpirationDateMap
	(*OptionTypeMap)(nil),          // 4: jax.v1.OptionTypeMap
	(*DexValue)(nil),               // 5: jax.v1.DexValue
	nil,                            // 6: jax.v1.GetDexResponse.StrikePricesEntry
	nil,                            // 7: jax.v1.ExpirationDateMap.ExpirationDatesEntry
	nil,                            // 8: jax.v1.OptionTypeMap.OptionTypesEntry
}
var file_api_proto_option_v1_dex_proto_depIdxs = []int32{
	6,  // 0: jax.v1.GetDexResponse.strike_prices:type_name -> jax.v1.GetDexResponse.StrikePricesEntry
	7,  // 1: jax.v1.ExpirationDateMap.expiration_dates:type_name -> jax.v1.ExpirationDateMap.ExpirationDatesEntry
	8,  // 2: jax.v1.OptionTypeMap.option_types:type_name -> jax.v1.OptionTypeMap.OptionTypesEntry
	3,  // 3: jax.v1.GetDexResponse.StrikePricesEntry.value:type_name -> jax.v1.ExpirationDateMap
	4,  // 4: jax.v1.ExpirationDateMap.ExpirationDatesEntry.value:type_name -> jax.v1.OptionTypeMap
	5,  // 5: jax.v1.OptionTypeMap.OptionTypesEntry.value:type_name -> jax.v1.DexValue
	0,  // 6: jax.v1.OptionService.GetDex:input_type -> jax.v1.GetDexRequest
	1,  // 7: jax.v1.OptionService.GetDexByStrikes:input_type -> jax.v1.GetDexByStrikesRequest
	0,  // 8: jax.v1.OptionService.GetGex:input_type -> jax.v1.GetDexRequest
	1,  // 9: jax.v1.OptionService.GetGexByStrikes:input_type -> jax.v1.GetDexByStrikesRequest
	2,  // 10: jax.v1.OptionService.GetDex:output_type -> jax.v1.GetDexResponse
	2,  // 11: jax.v1.OptionService.GetDexByStrikes:output_type -> jax.v1.GetDexResponse
	2,  // 12: jax.v1.OptionService.GetGex:output_type -> jax.v1.GetDexResponse
	2,  // 13: jax.v1.OptionService.GetGexByStrikes:output_type -> jax.v1.GetDexResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_proto_option_v1_dex_proto_init() }
func file_api_proto_option_v1_dex_proto_init() {
	if File_api_proto_option_v1_dex_proto != nil {
		return
	}
	file_api_proto_option_v1_dex_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_option_v1_dex_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_option_v1_dex_proto_goTypes,
		DependencyIndexes: file_api_proto_option_v1_dex_proto_depIdxs,
		MessageInfos:      file_api_proto_option_v1_dex_proto_msgTypes,
	}.Build()
	File_api_proto_option_v1_dex_proto = out.File
	file_api_proto_option_v1_dex_proto_rawDesc = nil
	file_api_proto_option_v1_dex_proto_goTypes = nil
	file_api_proto_option_v1_dex_proto_depIdxs = nil
}

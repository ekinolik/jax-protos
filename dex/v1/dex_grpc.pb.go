// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: api/proto/dex/v1/dex.proto

package dexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DexService_GetDex_FullMethodName          = "/dex.v1.DexService/GetDex"
	DexService_GetDexByStrikes_FullMethodName = "/dex.v1.DexService/GetDexByStrikes"
)

// DexServiceClient is the client API for DexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DexService provides endpoints for delta exposure calculations
type DexServiceClient interface {
	// GetDex returns the delta exposure calculations for given parameters
	GetDex(ctx context.Context, in *GetDexRequest, opts ...grpc.CallOption) (*GetDexResponse, error)
	// GetDexByStrikes returns the delta exposure calculations for a specified number of strikes around the spot price
	GetDexByStrikes(ctx context.Context, in *GetDexByStrikesRequest, opts ...grpc.CallOption) (*GetDexResponse, error)
}

type dexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDexServiceClient(cc grpc.ClientConnInterface) DexServiceClient {
	return &dexServiceClient{cc}
}

func (c *dexServiceClient) GetDex(ctx context.Context, in *GetDexRequest, opts ...grpc.CallOption) (*GetDexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDexResponse)
	err := c.cc.Invoke(ctx, DexService_GetDex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexServiceClient) GetDexByStrikes(ctx context.Context, in *GetDexByStrikesRequest, opts ...grpc.CallOption) (*GetDexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDexResponse)
	err := c.cc.Invoke(ctx, DexService_GetDexByStrikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DexServiceServer is the server API for DexService service.
// All implementations must embed UnimplementedDexServiceServer
// for forward compatibility.
//
// DexService provides endpoints for delta exposure calculations
type DexServiceServer interface {
	// GetDex returns the delta exposure calculations for given parameters
	GetDex(context.Context, *GetDexRequest) (*GetDexResponse, error)
	// GetDexByStrikes returns the delta exposure calculations for a specified number of strikes around the spot price
	GetDexByStrikes(context.Context, *GetDexByStrikesRequest) (*GetDexResponse, error)
	mustEmbedUnimplementedDexServiceServer()
}

// UnimplementedDexServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDexServiceServer struct{}

func (UnimplementedDexServiceServer) GetDex(context.Context, *GetDexRequest) (*GetDexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDex not implemented")
}
func (UnimplementedDexServiceServer) GetDexByStrikes(context.Context, *GetDexByStrikesRequest) (*GetDexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDexByStrikes not implemented")
}
func (UnimplementedDexServiceServer) mustEmbedUnimplementedDexServiceServer() {}
func (UnimplementedDexServiceServer) testEmbeddedByValue()                    {}

// UnsafeDexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DexServiceServer will
// result in compilation errors.
type UnsafeDexServiceServer interface {
	mustEmbedUnimplementedDexServiceServer()
}

func RegisterDexServiceServer(s grpc.ServiceRegistrar, srv DexServiceServer) {
	// If the following call pancis, it indicates UnimplementedDexServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DexService_ServiceDesc, srv)
}

func _DexService_GetDex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServiceServer).GetDex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DexService_GetDex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServiceServer).GetDex(ctx, req.(*GetDexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DexService_GetDexByStrikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDexByStrikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DexServiceServer).GetDexByStrikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DexService_GetDexByStrikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DexServiceServer).GetDexByStrikes(ctx, req.(*GetDexByStrikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DexService_ServiceDesc is the grpc.ServiceDesc for DexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dex.v1.DexService",
	HandlerType: (*DexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDex",
			Handler:    _DexService_GetDex_Handler,
		},
		{
			MethodName: "GetDexByStrikes",
			Handler:    _DexService_GetDexByStrikes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/dex/v1/dex.proto",
}
